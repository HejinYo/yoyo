<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <description>SpringMVC 配置</description>
    <!-- 扫描service 包下面 web 使用注解的类型，注册并注入（包含context:annotation-config/>功能） -->
    <!-- 注意事项请参考：http://jinnianshilongnian.iteye.com/blog/1762632 -->
    <context:component-scan base-package="cn.hejinyo.*.controller,cn.hejinyo.core.exception.handler" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 自动注入已经注册的bean。 当使用 <context:component-scan/> 后，就可以将其移除了-->
    <!--<context:annotation-config/>-->

    <!-- 开启AOP监听,aop启用CGliB代理,只对当前配置文件有效 -->
    <!--通知spring使用cglib而不是jdk的来生成代理方法, AOP可以拦截到Controller,因为是拦截Controller,这句必须加在springmvc配置文件中 -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler/>

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/resources/**" location="/resources"/>

    <!-- 配置Spirng MVC -->
    <!-- 1: 开启SpirngMVC注解模式，自动注册DefaultAnnotationHandLerMapping等，提供一些列：数据绑定，数字和日期的format 和 xml，json默认读写支持-->
    <mvc:annotation-driven validator="validator" conversion-service="customizeConversionService">
        <mvc:message-converters>
            <ref bean="stringConverter"/>
            <ref bean="fastjsonConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 解析String请求数据 -->
    <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8" index="0"/>
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!--如果用fastJson需要在这配置 -->
    <bean id="fastjsonConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
        <property name="supportedMediaTypes">
            <list><!-- 返回字符串格式 -->
                <value>text/html;charset=UTF-8</value><!-- 避免IE出现下载JSON文件的情况 -->
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="fastJsonConfig">
            <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
                <property name="features">
                    <list>
                        <value>AllowArbitraryCommas</value><!-- 允许接受连续多个","的json串 -->
                        <value>AllowUnQuotedFieldNames</value> <!-- 允许不引用字段名称 -->
                        <value>DisableCircularReferenceDetect</value><!--禁用循环引用检测-->
                    </list>
                </property>
                <!--这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等-->
                <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"></property>
            </bean>
        </property>
    </bean>

    <!-- 类型转换 -->
    <bean id="customizeConversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="formatters">
            <set>
                <bean class="cn.hejinyo.core.utils.DateFormatterUtil"></bean>
            </set>
        </property>
    </bean>

    <!-- jsp视图解析器 -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="1"/> <!-- 查找顺序 -->
    </bean>

    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="cn.hejinyo.core.FreeMarker.RichFreeMarkerView"/>
        <property name="suffix" value=".html"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="requestContextAttribute" value="request" />
        <property name="cache" value="true"/>
        <property name="order" value="0"></property> <!-- 先查找freemarker，然后查找Jsp -->
    </bean>

    <!-- 配置freeMarker的模板路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">1</prop><!-- 3600后重新载入，开发设置成1 -->
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">#.##</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="url_escaping_charset">utf-8</prop> <!-- url编码utf8  -->
                <prop key="whitespace_stripping">true</prop> <!--去掉多余的空格,非常有用-->
                <prop key="classic_compatible">true</prop><!-- 如果变量为null,转化为空字符串,比如做比较的时候按照空字符做比较 -->
            </props>
        </property>
    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>

    <!--hibernate校验器-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <!-- 校验错误信息配置文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 资源文件名-->
        <property name="basenames">
            <list>
                <!-- 文件结尾必须是.properties,但是这个不写，虽然idea报错，但规则是正确的 -->
                <value>classpath:properties/messages</value>
                <value>org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <!-- 资源文件编码格式 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120"/>
    </bean>

    <!-- Shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启默认Advisor自动代理，AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
</beans>