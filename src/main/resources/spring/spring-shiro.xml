<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- spring 启用aop -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 注解RequiresPermissions 需要此配置，否侧注解不生效，和上面aop搭配才有效 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 在方法中 注入  securityManager ，进行代理控制,相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="statelessAuthcFilter" class="cn.hejinyo.core.shiro.filter.StatelessAuthcFilter"/>
    <bean id="statelessLoginFilter" class="cn.hejinyo.core.shiro.filter.StatelessLoginFilter"/>
    <bean id="LogoutFilter" class="cn.hejinyo.core.shiro.filter.LogoutFilter"/>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <map>
                <entry key="login" value-ref="statelessLoginFilter"/>
                <entry key="authc" value-ref="statelessAuthcFilter"/>
                <entry key="logout" value-ref="LogoutFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /logout = logout
                /login = login
                /verifyImg** = anon
                /resources/** anon
                /webservice/** anon
                /druid/** anon
                /** = authc

            </value>
        </property>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="cn.hejinyo.core.shiro.realm.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/> <!-- 散列算法 -->
        <property name="hashIterations" value="2"/> <!-- 散列次数 -->
        <property name="storedCredentialsHexEncoded" value="true"/> <!-- 将密文16进制存储,默认开启，为false，则使用base64 -->
    </bean>

    <!-- 登录创建token的Realm -->
    <bean id="statelessLoginRealm" class="cn.hejinyo.core.shiro.realm.StatelessLoginRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/><!-- 凭证匹配器 -->
        <property name="cachingEnabled" value="false"/> <!-- 登录不启用缓存，默认false -->
    </bean>

    <!-- token验证Realm-->
    <bean id="StatelessAuthcRealm" class="cn.hejinyo.core.shiro.realm.StatelessAuthcRealm">
        <property name="cachingEnabled" value="true"/> <!-- 启用缓存 -->
        <property name="authenticationCachingEnabled" value="false"/> <!--不启用身份验证缓存，即缓存AuthenticationInfo信息，默认false-->
        <property name="authenticationCacheName" value="userCache"/> <!--  缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authorizationCachingEnabled" value="true"/> <!-- 启用授权缓存，即缓存AuthorizationInfo信息，默认false -->
        <property name="authorizationCacheName" value="authCache"/> <!--缓存AuthorizationInfo信息的缓存名称 -->
    </bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/shiro-ehcache.xml"/>
    </bean>

    <!-- 安全管理器 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="statelessLoginRealm"/>
                <ref bean="StatelessAuthcRealm"/>
            </list>
        </property>
        <property name="authenticator" ref="authenticator"/>
        <property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value="false"/>
        <property name="subjectFactory" ref="subjectFactory"/>
        <property name="cacheManager" ref="cacheManager"/> <!-- 注入缓存管理器 -->
    </bean>

    <!-- Subject工厂,禁用了session -->
    <bean id="subjectFactory" class="cn.hejinyo.core.shiro.subject.StatelessDefaultSubjectFactory"/>

    <!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="cn.hejinyo.core.shiro.realm.DefaultModularRealm">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
        <!-- 注入自定义realm ，这里和securityManager都需要注入-->
        <property name="realms">
            <list>
                <ref bean="statelessLoginRealm"/>
                <ref bean="StatelessAuthcRealm"/>
            </list>
        </property>
    </bean>

</beans>