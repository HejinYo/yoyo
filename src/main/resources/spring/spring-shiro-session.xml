<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启默认Advisor自动代理，AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="${shiro.loginUrl}"/>
        <!-- 认证成功统一跳转的连接，shiro认证成功自动到上一个请求路径 -->
        <!--<property name="successUrl" value="${shiro.successUrl}"/>-->
        <!-- unauthorizedUrl 属性指定如果授权失败时重定向到的地址 -->
        <property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}"/>
        <!-- 自定义filter配置 -->
        <property name="filters">
            <map>
                <!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="baseUrl">
                    <bean class="cn.hejinyo.core.shiro.filter.URLFilter"/>
                </entry>
            </map>
        </property>
        <!-- 过滤链的定义, http://blog.csdn.net/jadyer/article/details/12172839 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 退出拦截，请求logout.action执行退出操作 -->
                /logout = logout
                <!-- 匿名可以访问页面,静态资源 -->
                /verifyImg** = anon
                /resources/** anon
                /webservice/** anon
                /druid/** anon
                /test/clearLock = anon
                /test/** = anon
                <!--/test/html2 = user-->
                <!-- 身份认证通过可以访问 -->
                /login = authc
                /** = baseUrl,authc
                <!-- 需要权限访问 -->
                <!--/test/needquery=perms[user:query]-->
            </value>
        </property>
    </bean>

    <!-- 在方法中 注入  securityManager ，进行代理控制,相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="cn.hejinyo.core.shiro.realm.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/> <!-- 散列算法 -->
        <property name="hashIterations" value="2"/> <!-- 散列次数 -->
        <property name="storedCredentialsHexEncoded" value="true"/> <!-- 将密文16进制存储,默认开启，为false，则使用base64 -->
    </bean>

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->
    <bean id="userRealm" class="cn.hejinyo.core.shiro.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/><!-- 凭证匹配器 -->
        <property name="cachingEnabled" value="true"/> <!-- 启用缓存，默认false -->
        <property name="authenticationCachingEnabled" value="false"/> <!--不启用身份验证缓存，即缓存AuthenticationInfo信息，默认false-->
        <property name="authenticationCacheName" value="sys-userCache"/> <!--  缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authorizationCachingEnabled" value="true"/> <!-- 启用授权缓存，即缓存AuthorizationInfo信息，默认false -->
        <property name="authorizationCacheName" value="sys-authCache"/> <!--缓存AuthorizationInfo信息的缓存名称 -->
    </bean>

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/shiro-ehcache.xml"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="cn.hejinyo.core.shiro.validation.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="${shiro.session.validation.interval}"/> <!-- 指定此调度程序调用的频率（以毫秒为单位）,默认60*60*1000 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话ID生成器 用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- 会话DAO ，用于会话的CRUD-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="${shiro.active.session.cacheName}"/> <!-- 设置Session缓存名字，默认就是shiro-activeSessionCache -->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/> <!-- 注入会话ID生成器 -->
        <property name="cacheManager" ref="cacheManager"/> <!-- 会话缓存，EnterpriseCacheSessionDAO需要设置，缓存名称与activeSessionsCacheName相同 -->
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <!--如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击-->
        <property name="httpOnly" value="true"/>
        <!-- 设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie -->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话管理器,这个会导致第一次打开网页时抛出no sissionid的异常 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"/> <!-- 全局会话超时时间，毫秒 默认30分钟 -->
        <property name="deleteInvalidSessions" value="true"/> <!-- 过期会话删除，默认是开启的，在会话过期后会调用SessionDAO的delete方法删除会话 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/> <!-- 是否开启会话验证器，默认是开启的 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/> <!-- 会话验证调度器 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!-- rememberMe Cookie模板 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.rememeberMe.cookie.name}"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/><!-- 7天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <!-- md5("hejinyo")base64  AxFhcAUojzpPXvxkfadibQ==  -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('AxFhcAUojzpPXvxkfadibQ==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 安全管理器 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/> <!-- 注入自定义realm -->
        <property name="cacheManager" ref="cacheManager"/> <!-- 注入缓存管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="cn.hejinyo.core.shiro.filter.AjaxLoginFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="loginpw"/>
        <property name="loginUrl" value="${shiro.loginUrl}"/> <!-- 执行登录的url -->
        <property name="redirectSuccessUrl" value="/*"/> <!-- 登陆前访问路径满足则跳转，默认不跳转，"/*"表示所有登录都跳转，"/"表示登陆前访问根目录跳转 -->
        <property name="successUrl" value="${shiro.successUrl}"/> <!-- 登录成功跳转的页面，需要设置redirectSuccessUrl有效 -->
        <property name="rememberMeParam" value="rememberMe"/> <!-- rememberMe请求参数名，请求参数是boolean类型，true表示rememberMe -->
    </bean>


</beans>