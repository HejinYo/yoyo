group 'cn.hejinyo'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'jetty'//应用jetty插件

// 设置 JDK 版本
sourceCompatibility = 1.8 //指定编译编译.java文件的jdk版本
targetCompatibility = 1.8 //确保class文件与targetCompatibility指定版本，或者更新的java虚拟机兼容

// 设置 maven 库地址
repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral() // 中央库
    maven { url "http://repo.maven.apache.org/maven2/" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

// 设置依赖
dependencies {
    //compile files('libs/android-support-v4.jar')  //单文件依赖
    //compile fileTree(dir: 'lib', include: ['*.jar'])  //导入本地jar包
    //应用格式1: compile/testCompile packageName:artifactId:version
    //应用格式2: compile/testCompile group: 'packageName', name: 'artifactId', version: 'version'
    //compile 代码和编译所需的依赖。
    //runtime 产品代码在运行时需要的依赖，默认，也会包含compile中的依赖。
    //testCompile 编译测试代码时所需要的依赖，默认，被编译的产品代码和产品代码需要的编译依赖也属于该分组。
    //testRuntime 运行测试时需要的依赖。默认，包含compile，runtime和testCompile的分组的构建和依赖。
    //做web开发时需要servlet的依赖，但是只是编译阶段，运行时servlet依赖由servlet容器来提供。
    //providedCompile , providedRuntime，它们对依赖的使用范围定义和compile以及runtime一致，只不过依赖的Jar包不会被加到War包里面。
    testCompile group: 'junit', name: 'junit', version: '4.12' //测试时

    /* Start LOG */
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.apache.logging.log4j:log4j-web:2.8.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25'
    /* End Log */

    /* Start Mybatis */
    compile 'org.mybatis:mybatis:3.4.2'
    compile 'org.mybatis:mybatis-spring:1.3.1'
    compile 'com.github.pagehelper:pagehelper:5.0.0' //分页插件
    /* End Mybatis */

    /* Start database pool */
    compile 'com.alibaba:druid:1.0.29'
    compile 'mysql:mysql-connector-java:5.1.30' //运行时
    /* End database pool */

    /* Start Servlet web */
    compile 'taglibs:standard:1.1.2'
    compile 'jstl:jstl:1.2' //运行时
    compile 'javax.servlet:javax.servlet-api:3.1.0' // 编译期
    compile 'org.freemarker:freemarker:2.3.26-incubating'
    /* End Servlet web */

    /* Start Spring */
    compile 'org.hibernate:hibernate-validator:5.2.4.Final'
    compile 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.7.RELEASE'
    compile 'org.springframework:spring-context-support:4.3.7.RELEASE'
    compile 'org.springframework:spring-aspects:4.3.7.RELEASE'
    testCompile 'org.springframework:spring-test:4.3.7.RELEASE'
    /* End Spring */

    /* Start 验证码 */
    compile 'com.github.penggle:kaptcha:2.3.2'
    compile 'com.octo.captcha:jcaptcha:1.0'
    /* End 验证码 */

    /* Start json */
    compile 'com.alibaba:fastjson:1.2.30'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'
    /* End json */

    /* Start shiro*/
    compile 'org.apache.shiro:shiro-core:1.4.0-RC2'
    compile 'org.apache.shiro:shiro-spring:1.4.0-RC2'
    compile 'org.apache.shiro:shiro-ehcache:1.4.0-RC2'
    compile 'org.apache.shiro:shiro-aspectj:1.4.0-RC2'
    compile 'org.quartz-scheduler:quartz:2.2.3'
    compile('org.apache.shiro:shiro-quartz:1.4.0-RC2') {
        /*排除这个依赖，因为quartz 1.6.1版本和2.2.3版本不兼容*/
        exclude group: 'org.opensymphony.quartz'
    }
    /* End shiro*/

    /* Start AOP */
    compile 'cglib:cglib:3.2.5'
    compile 'aopalliance:aopalliance:1.0'
    /* End AOP */

    /* Start Tools */
    compile 'org.projectlombok:lombok:1.16.12'
    compile 'org.jodd:jodd-core:3.8.1'
    /* End Tools */

    /*CXF*/

    /*end CXF*/
    compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.11'
    compile 'org.apache.cxf:cxf-rt-transports-http:3.1.11'
    compile 'org.apache.cxf:cxf-rt-ws-security:3.1.11'
    /*test*/

    /*end test*/
}

//打包的时候 src内的所有的xml文件
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/java', 'src/main/resources']
        }
    }
}
//jetty内置容器插件运行配置
jettyRun {
    //访问项目名称
    contextPath = '/'
    //访问端口号
    httpPort = 8080
    //扫描静态资源的间隔时间
    scanIntervalSeconds 1
    //自动重新加载静态源
    reload "automatic"
}
//版本控制
task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
}
//使用UTF-8完成任务，解决jetty等插件乱码问题
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}